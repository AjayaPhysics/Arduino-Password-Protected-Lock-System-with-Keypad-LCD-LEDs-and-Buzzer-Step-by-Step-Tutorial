#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Keypad.h>

// Define LCD address and dimensions
LiquidCrystal_I2C lcd(0x27, 16, 2); // Update the I2C address if necessary (e.g., 0x3F)

// Define the keypad rows and columns
const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

// Keypad pin configuration
byte rowPins[ROWS] = {2, 3, 4, 5}; // R1, R2, R3, R4
byte colPins[COLS] = {6, 7, 8, 9}; // C1, C2, C3, C4

Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

// Password and input buffer
const String password = "1234"; // Set your password
String input = ""; // Buffer to store the entered password

// Pin definitions
const int buzzerPin = 10;
const int grantedLED = 11;
const int deniedLED = 12;

void setup() {
  // Initialize pins
  pinMode(buzzerPin, OUTPUT);
  pinMode(grantedLED, OUTPUT);
  pinMode(deniedLED, OUTPUT);

  // Initialize LCD
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("Enter Password:");

  Serial.begin(9600);
}

void loop() {
  char key = keypad.getKey(); // Get keypress from keypad

  if (key) { // If a key is pressed
    Serial.print("Key pressed: ");
    Serial.println(key);

    if (key == '#') { // Confirm input
      lcd.clear();
      if (input == password) {
        accessGranted();
      } else {
        accessDenied();
      }
      autoClear(); // Clear after attempt
    } else if (key == '*') { // Clear input
      autoClear(); // Reset input
    } else { // Append key to input
      input += key;
      lcd.setCursor(0, 1); // Display input on second row
      lcd.print(input);
      Serial.print("Current input: ");
      Serial.println(input);
    }
  }
}

// Function for access granted
void accessGranted() {
  Serial.println("Access Granted!");
  lcd.setCursor(0, 0);
  lcd.print("Access Granted!");
  digitalWrite(grantedLED, HIGH);
  tone(buzzerPin, 1000, 500); // 1 kHz beep for 500 ms
  delay(1000); // Keep the message for 1 second
  digitalWrite(grantedLED, LOW);
}

// Function for access denied
void accessDenied() {
  Serial.println("Access Denied!");
  lcd.setCursor(0, 0);
  lcd.print("Access Denied!");
  digitalWrite(deniedLED, HIGH);

  // Lower pitch and longer duration
  tone(buzzerPin, 300, 1000); // 300 Hz beep for 1 second
  delay(1000);
  digitalWrite(deniedLED, LOW);
}

// Function to clear input and reset LCD
void autoClear() {
  input = ""; // Reset the input buffer
  lcd.clear(); // Clear LCD display
  lcd.setCursor(0, 0);
  lcd.print("Enter Password:"); // Prompt for new input
  Serial.println("Input cleared and ready for next attempt");
}
